# -*- coding: utf-8 -*-
"""HarryPotter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TBkZ7Z72LYGj_8lGokyQk-GesFALgjxe
"""

!pip install -q accelerate==0.21.0 peft==0.4.0 bitsandbytes==0.40.2 transformers==4.28.1 trl==0.4.7 pypdf langchain
!pip install --upgrade trl langchain langchain-community gradio -qq

import os
import torch
from langchain.document_loaders import DirectoryLoader, PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig, TrainingArguments, pipeline
from trl import SFTTrainer
from datasets import Dataset
from peft import LoraConfig
import locale
import gradio as gr


locale.getpreferredencoding = lambda: "UTF-8"


from google.colab import userdata
sec_key = userdata.get("HF_tkn")
os.environ["HF_tkn"] = sec_key

model_name = "NousResearch/Llama-2-13b-chat-hf"
pdf_path = "/content/J. K. Rowling - Harry Potter 1 - Sorcerer's Stone (4 files merged).pdf"
output_dir = "./results"
num_train_epochs = 3
per_device_train_batch_size = 2
per_device_eval_batch_size = 2  #4 Reduced
gradient_accumulation_steps = 2
learning_rate = 2e-4
max_seq_length = 128
device_map = "auto"

lora_r = 32
lora_alpha = 16
lora_dropout = 0.1

use_4bit = True
bnb_4bit_compute_dtype = "float16"
bnb_4bit_quant_type = "nf4"
use_nested_quant = False

loader = PyPDFLoader(pdf_path)
documents = loader.load()

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1200, chunk_overlap=0)
split_documents = text_splitter.split_documents(documents)
split_documents = split_documents[:int(len(split_documents) * 0.5)]    #Select the first 50% of split_documents

dataset = Dataset.from_dict({"text": [doc.page_content for doc in split_documents]})


compute_dtype = getattr(torch, bnb_4bit_compute_dtype)
bnb_config = BitsAndBytesConfig(
    load_in_4bit=use_4bit,
    bnb_4bit_quant_type=bnb_4bit_quant_type,
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=use_nested_quant,
)


model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map=device_map
)
model.config.use_cache = False



tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right"

peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_r,
    bias="none",
    task_type="CAUSAL_LM"
)


training_arguments = TrainingArguments(
    output_dir=output_dir,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    learning_rate=learning_rate,
    fp16=True,
    logging_dir="./logs",
    logging_steps=25
)

trainer = SFTTrainer(
    model=model,
    train_dataset=dataset,
    peft_config=peft_config,
    dataset_text_field="text",
    max_seq_length=max_seq_length,
    tokenizer=tokenizer,
    args=training_arguments,
)

trainer.train()

def generate_text(prompt, model, tokenizer, max_length=250):
    instruction = f"[INST] {prompt} [/INST]"
    pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=max_length,do_sample=True, temperature=0.7)
    result = pipe(instruction)
    return result[0]['generated_text']

prompt = "Explain me the significance of the Triwizard Tournament in Harry Potter."
generated_text = generate_text(prompt, model, tokenizer)
print(generated_text)

prompt = "Which challenges does Harry face during the Triwizard Tournament"
generated_text = generate_text(prompt, model, tokenizer)
print(generated_text)

prompt = "Is Malfoy an ally of Voldemort?"
generated_text = generate_text(prompt, model, tokenizer)
print(generated_text)

prompt = "What are horcrux?"
generated_text = generate_text(prompt, model, tokenizer)
print(generated_text)

prompt = "Give me 5 examples of cool potions and explain what they do?"
generated_text = generate_text(prompt, model, tokenizer)
print(generated_text)

"""And"""

demo = gr.Interface(
    fn=generate_text,
    inputs=gr.Textbox(label="‚ú® Enter Your Prompt Here ‚ú®",placeholder="Ask something about Harry Potter...",lines=3,elem_id="input_box"),
    outputs=gr.Textbox(label="üßô‚Äç‚ôÇÔ∏è Generated Response üßô‚Äç‚ôÄÔ∏è",lines=10,elem_id="output_box"),
    title="‚ö°Ô∏è Harry Potter LLM Chat ‚ö°Ô∏è",
#    css="""
#        #input_box textarea { background-color: #f0f8ff; border: 2px solid #4b0082; color: #333333;font-size: 16px; padding: 10px;}
#        #output_box textarea { background-color: #f5f5f5; border: 2px solid #4b0082; color: #333333; font-size: 16px; padding: 10px;}
#        .gr-button { background-color: #4b0082; color: #ffffff; border: none;font-size: 16px; padding: 10px 20px; border-radius: 5px;}
#        .gr-button:hover { background-color: #6a0dad;}
#    """)
    css="""
            body {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            #input_box textarea {
                background-color: #000000;
                border: 2px solid #4b0082;
                color: #ffffff;
                font-size: 16px;
                padding: 10px;
            }
            #output_box textarea {
                background-color: #000000;
                border: 2px solid #4b0082;
                color: #ffffff;
                font-size: 16px;
                padding: 10px;
            }
            .gr-button {
                background-color: #4b0082;
                color: #ffffff;
                border: none;
                font-size: 16px;
                padding: 10px 20px;
                border-radius: 5px;
            }
            .gr-button:hover {
                background-color: #6a0dad;
                color: #ffffff;
            }
            .container {
                background-color: #1e1e1e;
            }
        """
    )

demo.launch()